<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tangyuxi.github.io</id>
    <title>Gridea</title>
    <updated>2020-02-25T14:04:50.139Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tangyuxi.github.io"/>
    <link rel="self" href="https://tangyuxi.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://tangyuxi.github.io/images/avatar.png</logo>
    <icon>https://tangyuxi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Linux Namespaces初体验——《自己动手写Docker》读书笔记（一）]]></title>
        <id>https://tangyuxi.github.io/post/linux-namespaces/</id>
        <link href="https://tangyuxi.github.io/post/linux-namespaces/">
        </link>
        <updated>2020-02-25T13:56:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-简介">一、简介</h1>
<p>下面是<a href="https://coolshell.cn/articles/17010.html">酷壳</a>给出的关于Linux Namespaces的介绍：</p>
<blockquote>
<p>Linux Namespace是Linux提供的一种内核级别环境隔离的方法。不知道你是否还记得很早以前的Unix有一个叫chroot的系统调用（通过修改根目录把用户jail到一个特定目录下），chroot提供了一种简单的隔离模式：chroot内部的文件系统无法访问外部的内容。Linux Namespace在此基础上，提供了对UTS、IPC、mount、PID、network、User等的隔离机制。</p>
</blockquote>
<p>当前Linux一共实现了6种不同类型的Namespace</p>
<table>
<thead>
<tr>
<th>Namespace类型</th>
<th>系统调用参数</th>
<th>内核版本</th>
<th>隔离内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mount Namespace</td>
<td>CLONE_NEWNS</td>
<td>2.4.19</td>
<td>挂载点（文件系统）</td>
</tr>
<tr>
<td>UTS Namespace</td>
<td>CLONE_NEWUTS</td>
<td>2.6.19</td>
<td>主机名与域名</td>
</tr>
<tr>
<td>IPC Namespacce</td>
<td>CLONE_NEWIPC</td>
<td>2.6.19</td>
<td>信号量、消息队列和共享内存</td>
</tr>
<tr>
<td>PID Namespace</td>
<td>CLONE_NEWPID</td>
<td>2.6.24</td>
<td>进程编号</td>
</tr>
<tr>
<td>Network Namespace</td>
<td>CLONE_NEWNET</td>
<td>2.6.29</td>
<td>网络设备、网络栈、端口等等</td>
</tr>
<tr>
<td>User Namespace</td>
<td>CLONE_NEWUSER</td>
<td>3.8</td>
<td>用户和用户组</td>
</tr>
</tbody>
</table>
<p>Namespace的API主要使用如下3个系统调用：</p>
<ul>
<li><code>clone()</code>: 创建新进程。</li>
<li><code>unshare()</code>: 将进程移出某个Namespace。</li>
<li><code>setns()</code>: 将进程加入到Namespace中。</li>
</ul>
<h1 id="二-体验">二、体验</h1>
<h2 id="uts-namespace">UTS Namespace</h2>
<p>UTS Namespace用于隔离nodename和domainname两个系统标识，即在不同的Namespace中允许拥有各自的hostname。</p>
<pre><code class="language-go">// 在GOPATH下新建一个名为mydocker的目录，并在该目录下新建文件main.go。

package main

import (
	&quot;fmt&quot;
	&quot;os&quot;
	&quot;os/exec&quot;
	&quot;syscall&quot;
)

func main() {
	cmd := exec.Command(&quot;bash&quot;)
	cmd.SysProcAttr = &amp;syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS,
	}
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Env = append(cmd.Env, `PS1=\[\e[32;1m\][\u@\h \W]$&gt;\[\e[0m\]`)

	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
</code></pre>
<p>以上代码通过<code>exec.Command(&quot;bash&quot;)</code>方式fork了一个bash子进程，并且使用了<code>CLONE_NEWUTS</code>标识符去创建了一个Namespace。下面验证下bash子进程与mydocker父进程是否处于不同的的UTS Namespace中。</p>
<pre><code class="language-shell">// 查看最初的系统hostname
voidint@ubuntu14:~$ hostname
ubuntu14.04

// 以root身份运行mydocker程序
voidint@ubuntu14:~$ sudo ./mydocker

// 在隔离的UTS Namespace下修改hostname为hello
root@ubuntu14:/home/voidint# hostname -b hello
root@ubuntu14:/home/voidint# hostname
hello

// 退出bash子进程并查看hostname是否发生变化
root@ubuntu14:/home/voidint# exit
exit

// 可以看到hostname并未发生变化
voidint@ubuntu14:~$ hostname
ubuntu14.04
</code></pre>
<h2 id="pid-namespace">PID Namespace</h2>
<p>PID Namespace用于隔离进程ID，同一个进程在不同的PID Namespace中可以拥有不同的PID。以docker容器为例，每个容器对于宿主机而言都是一个进程，若在容器内部查看到该进程的PID为<code>1</code>，但在宿主机上查看到的PID并非为<code>1</code>，这就是由于容器内拥有独立的PID Namespace的缘故。</p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;os&quot;
	&quot;os/exec&quot;
	&quot;syscall&quot;
)

func main() {
	cmd := exec.Command(&quot;bash&quot;)
	cmd.SysProcAttr = &amp;syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWIPC | syscall.CLONE_NEWPID,
	}
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Env = append(cmd.Env, `PS1=\[\e[32;1m\][\u@\h \W]$&gt;\[\e[0m\]`)

	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
</code></pre>
<p>编译并运行以上程序，查看当前Namespace的PID，PID为<code>1</code>。</p>
<pre><code class="language-shell">root@ubuntu14:/home/voidint# echo $$
1
</code></pre>
<p>在宿主机上新开一个shell，并通过<code>pstree -pl</code>查看mydocker的PID为<code>2692</code>。注意，这里不能使用<code>ps</code>命令去查看，因为<code>ps</code>、<code>top</code>之类的命令会读取<code>/proc</code>目录下内容，由于此处并未进行Mount Namespace的隔离，查看到的<code>/proc</code>目录下内容并不真实和准确。</p>
<h2 id="mount-namespace">Mount Namespace</h2>
<p>Mount Namespace用来隔离各个进程看到的挂载点视图。在Mount Namespace中调用<code>mount()</code>或者<code>umount()</code>都仅仅只是影响当前Namespace内的文件系统，对于全局的文件系统并没有影响。</p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;os&quot;
	&quot;os/exec&quot;
	&quot;syscall&quot;
)

func main() {
	cmd := exec.Command(&quot;bash&quot;)
	cmd.SysProcAttr = &amp;syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS |
			syscall.CLONE_NEWIPC |
			syscall.CLONE_NEWPID |
			syscall.CLONE_NEWNS,
	}
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Env = append(cmd.Env, `PS1=\[\e[32;1m\][\u@\h \W]$&gt;\[\e[0m\]`)

	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
</code></pre>
<p>运行以上程序，在启动的bash子进程中执行<code>ps -ef</code>，依然可以看到宿主机上的所有进程，这是由于<code>proc</code>文件系统是继承自宿主机。下面重新挂载proc文件系统，并再次查看<code>ps -ef</code>的输出。</p>
<pre><code class="language-shell">root@ubuntu14:/home/voidint# mount -t proc proc /proc

root@ubuntu14:/home/voidint# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 18:11 pts/1    00:00:00 bash
root        14     1  0 18:16 pts/1    00:00:00 ps -ef
</code></pre>
<p>可以看到，重新挂载proc文件系统后，ps命令仅能看到<strong>容器内</strong>的进程了，符合预期。</p>
<h2 id="user-namespace">User Namespace</h2>
<p>User Namespace用来隔离<code>uid</code>和<code>gid</code>，即可以使得在Namespace内外看到的<code>uid</code>和<code>gid</code>不同。</p>
<h1 id="三-参考">三、参考</h1>
<ul>
<li><a href="https://www.amazon.cn/dp/B072ZDHK9S/ref=sr_1_1?ie=UTF8&amp;qid=1535615095&amp;sr=8-1&amp;keywords=%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99docker">《自己动手写Docker》</a></li>
<li><a href="http://man7.org/linux/man-pages/man7/namespaces.7.html">Namespaces</a></li>
<li><a href="https://coolshell.cn/articles/17010.html">DOCKER基础技术：LINUX NAMESPACE（上）</a></li>
<li><a href="https://coolshell.cn/articles/17029.html">DOCKER基础技术：LINUX NAMESPACE（下）</a></li>
<li><a href="http://www.infoq.com/cn/articles/docker-kernel-knowledge-namespace-resource-isolation">Docker背后的内核知识——Namespace资源隔离</a></li>
<li><a href="https://hacpai.com/article/1419219697193">使用 Golang 操作 Linux Namespaces</a></li>
</ul>
]]></content>
    </entry>
</feed>